# -*- coding: utf-8 -*-
"""Comp Phy #2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DBgJpD3VtfAyq_iAYThiBcPX6zhEUl99
"""

#prob 1
import numpy as np
import matplotlib.pyplot as plt
import scipy
import scipy.optimize as opt
from scipy.optimize import curve_fit


onek_array = np.random.uniform(size= 1000, low = 0, high = 1)
tenk_array = np.random.uniform(size= 10000, low = 0, high = 1)
hundredk_array = np.random.uniform(size= 100000, low = 0, high = 1)

#linear equation
def linear(x,m,b):
    return m*x + b

#plotting the hist and lines
def plot_hist(size,name):
  fig, ax = plt.subplots(1,1, figsize = (6,6))

  #defining and creatin 100 bins
  hist_data, bin_edges = np.histogram(size, bins = 100)
  ax.hist(size, bins = 100, label = 'Histogram')


  #array for x vals
  bin_midpts =  0.5*(bin_edges[1:] + bin_edges[:-1])

  #scalling the uncert using sigma, and setting abs uncert to true to be within units of data
  params, cov = opt.curve_fit(linear, bin_midpts, hist_data,sigma = np.sqrt(hist_data), absolute_sigma = True)

  #getting the slope
  slope, inter = params

  #finding the uncertainty for the bins using sqrt
  slope_uncertanty = np.sqrt(cov[0,0])
  intercept_uncert = np.sqrt(cov[1,1])

  #vars for bet fit
  x = np.linspace(bin_edges[0], bin_edges[-1], 100)
  y = linear(x, slope, inter)
  ax.plot(x,y, '--', label='Fit')

  #creating labels
  ax.set_xlabel('x')
  ax.set_ylabel('Count')
  ax.set_title('Histogram of ' + name)
  ax.legend()
  plt.show()
  return hist_data

#second part of problem 1



def distribution(hist_data,N): #creating a function that takes in the histdata and return E for plottting
  n_i = hist_data
  E =[]
  expect = N/100
  for i in range(len(n_i)):
    E_i = (n_i[i] - expect) / (np.sqrt(n_i[i]))
    E.append(E_i)
  return E

def plot_dist(E_vals,name):
  fig, ax = plt.subplots(1,1, figsize = (6,6))
  #defining and creatin 20 bins

  ax.hist(E_vals, bins = 20, density = True, label = 'Distribution')
  #evenly spaces intervals from -5,5

  x = np.linspace(-5, 5, 500)
  #plotting an actual gaussian for reference
  ax.plot(x, np.exp(-x**2 / 2) / (np.sqrt(2* np.pi)), 'r-', label = 'Gaussian')

  #creating labels
  ax.set_xlabel('x')
  ax.set_ylabel('Count')
  ax.set_title('Distribution of ' + name)
  ax.legend()
  plt.show()




histdata_1k = plot_hist(onek_array, ' 1000') #differnetiating hist data for each 'gassuasin distribution'
E_val1k = distribution(histdata_1k,1000)
plot_dist(E_val1k, '1000')

histdata_10k = plot_hist(tenk_array, '10000')
E_val10k = distribution(histdata_10k,10000)
plot_dist(E_val10k, '10000')

histdata_100k=plot_hist(hundredk_array, '100000')
E_val100k = distribution(histdata_100k,100000)
plot_dist(E_val100k, '100000')

#Part 2
import numpy as np
import matplotlib.pyplot as plt

mean_path = 1 # definig variables
radius = 10
c = 1
number_of_sim = 10000

def propigation_time(mean_path, radius, c):
  #creating coords and time
  x,y = 0, 0
  time = 0

  while radius > np.sqrt(x**2 + y**2): # when the particle passes the radius is will record time
    
    r = np.random.uniform(0,1) #pulling # from 0-1 dist

    delta_t = -mean_path/c * np.log(r) #using delta t equation

    dist = c *delta_t 
    
    #trig and updating the coords
    theta = np.random.uniform(0, 2*np.pi)
    x += dist * np.cos(theta)
    y += dist * np.sin(theta)
    time += dist / c
    return time


Times = []  #making list to hold times
for i in range(number_of_sim): #iterating Number of sim times
  time = propigation_time(mean_path, radius, c)
  Times.append(time)

#plotting the histogram
fig, ax = plt.subplots(1,1, figsize = (6,6))
ax.hist(Times, bins = 20, density = True, label = 'Distribution')
ax.set_xlabel('Time')
ax.set_ylabel('Probability')
ax.set_title('Histogram of escape time')
ax.legend()
plt.show()

average_time = np.mean(Times)#averege veresus photon
photon_time = radius/c
print(f'The time it takes for the photon to escape {photon_time}')
print(f'The average time it takes for the photon to escape {average_time}')
